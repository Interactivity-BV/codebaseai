"""
This script generates analysis reports based on the analysis of a codebase using AI. It processes reports generated by 
various tools like Vulture, Pylint, Radon CC, and Radon MI, and uses OpenAI to create summaries and suggestions for 
improvement. The script requires an OpenAI API key and uses environment variables for configuration.
"""

import argparse
import logging
import codebaseai
from common import setup_logger, get_path, for_each_file

# Parse command line arguments
parser = argparse.ArgumentParser(description="Create reports based on the analysis of a codebase using AI.")
parser.add_argument("-r", "--report_dir", required=True, help="The directory of reports by analyse_codebase.py.")
parser.add_argument("-o", "--output_dir", required=True, help="The directory to save the analysis reports generated by AI.")
parser.add_argument("-l", "--log_file", default='./analysis.log', help="The file to save the log.")
parser.add_argument("-L", "--log_level", default='INFO', help="The loglevel.")
parser.add_argument("-S", "--log_silent", help="Suppress the log to stdout.", action='store_false')
parser.add_argument("-m", "--model_name", default="", help="default model name.")
parser.add_argument("-M", "--llm_name", default="", help="default lmm.")
args = parser.parse_args()

#initialize logger
logger = logging.getLogger(__name__)
setup_logger(args.log_file, args.log_level,args.log_silent)


def main():
    """
    Main function to create analysis reports using OpenAI.

    Side Effects:
        Checks the existence of the report directory and initiates the report generation process.
        Logs errors and information messages.
    """
    MODEL_NAME = codebaseai.get_model_name(args.llm_name, args.model_name)
    #initialize ai
    codebaseai.load_llm(args.llm_name)
    run_chain = codebaseai.run_chain()

    REPORT_DIR = get_path(args.report_dir)
    OUTPUT_DIR = get_path(args.output_dir, create_if_not_exists=True)

    logger.info(f"Analyzing reports at: {REPORT_DIR}")
    logger.info(f"AI reports will be saved to: {OUTPUT_DIR}")
    codebaseai.create_report_with_openai(REPORT_DIR, OUTPUT_DIR, run_chain, MODEL_NAME)

if __name__ == "__main__":
    main()